AWSTemplateFormatVersion: "2010-09-09"
Description: Product Service (node-reference)
Parameters:
  Image:
    Type: String
    Description: Docker image to run
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Id of the VPC
    Default: vpc-868750e3
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet Ids to run in
  BaseDomain:
    Type: String
    Description: Domain name to place this application under as a subdomain
  Subdomain:
    Type: String
    Description: Subdomain to deploy this app to
Resources:
  ProductsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  ProductsSnapshotTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: lastModified
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: "HASH"
        - AttributeName: lastModified
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  ProductEventsTopic: 
    Type: "AWS::SNS::Topic"
    Properties: {}
  LogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 30
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties: {}
  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
  TaskPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${AWS::StackName}-TaskPolicy"
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - dynamodb:*
            Resource: !GetAtt ProductsTable.Arn
          - Effect: "Allow"
            Action: 
              - logs:*
            Resource: !GetAtt LogGroup.Arn
  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    DependsOn: 
      - TaskPolicy
    Properties: 
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: ProductService
          Environment:
            - Name: PRODUCTS_TABLE_NAME
              Value: !Ref ProductsTable
            - Name: PRODUCTS_SNAPSHOT_TABLE_NAME
              Value: !Ref ProductsSnapshotTable
            - Name: PRODUCT_EVENTS_TOPIC_ARN
              Value: !Ref ProductEventsTopic
          PortMappings:
            - ContainerPort: 3000
          Essential: true
          Image: !Ref Image
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ProductService
  Service: 
    Type: AWS::ECS::Service
    DependsOn: 
      - LoadBalancer
    Properties: 
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers: 
        - ContainerName: ProductService
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref AppSG
  LoadBalancerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Load balancer security group"
      VpcId: !Ref VpcId      
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
        - IpProtocol: "tcp"
          CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
  AppSG: #This security group holds the application
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Application security group"
      VpcId: !Ref VpcId 
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          SourceSecurityGroupId: !Ref LoadBalancerSG
          FromPort: 1
          ToPort: 65000
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSG
      LoadBalancerAttributes:
        - Key: "idle_timeout.timeout_seconds"
          Value: 15
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: 
      - LoadBalancer
    Properties:
      TargetType: ip
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 3000
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key:  deregistration_delay.timeout_seconds
          Value:  30
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${Subdomain}.${BaseDomain}"
      DomainValidationOptions:
      - DomainName: !Sub "${Subdomain}.${BaseDomain}"
        ValidationDomain: !Ref BaseDomain
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${BaseDomain}."
      Name: !Sub "${Subdomain}.${BaseDomain}"
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt "LoadBalancer.CanonicalHostedZoneID"
        DNSName: !GetAtt "LoadBalancer.DNSName"
  AlarmTopic: 
    Type: "AWS::SNS::Topic"
    Properties: {}
  SlowResponseTimeAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      Namespace: "AWS/ApplicationELB"
      MetricName: "TargetResponseTime"
      Dimensions:
        - Name: "LoadBalancer"
          Value: !GetAtt "LoadBalancer.LoadBalancerFullName"
      ExtendedStatistic: p95
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 100
      Period: 60
      EvaluationPeriods: 1
      AlarmActions:
        - !Ref AlarmTopic
Outputs:
  LoadBalancerDNS:
    Value: !GetAtt LoadBalancer.DNSName
  LoadBalancerFullName:
    Value: !GetAtt LoadBalancer.LoadBalancerFullName
    Export:
      Name: !Sub "${AWS::StackName}:LoadBalancerFullName"
  AlarmTopicArn:
    Value: !Ref AlarmTopic
    Export:
      Name: !Sub "${AWS::StackName}:AlarmTopicArn"